Solution 1(two passes - my solution):
class Solution(object):
   def sortColors(self, nums):
       """
       :type nums: List[int]
       :rtype: None Do not return anything, modify nums in-place instead.
       """
       d={0:0, 1:0, 2:0}
       for num in nums:
           d[num]+=1
       for i in range(len(nums)):
           if d[0]>0:
               nums[i]=0
               d[0]-=1
           elif d[1]>0:
               nums[i]=1
               d[1]-=1
           else:
               nums[i]=2
              # d[2]-=2 #not needed for our logic

Solution 2(single pass solution, 3 pointer solution ):
ref: https://www.youtube.com/watch?v=4xbWSRZHqac&ab_channel=NeetCode
class Solution:
    def sortColors(self, nums: List[int]) -> None:
        # Initialize the start, current, and end pointers
        low = 0
        high = len(nums) - 1
        mid = 0
        # Iterate through the list until the current pointer exceeds the end pointer
        while mid <= high:
            if nums[mid] == 0:
                # If the current element is 0, swap it with the element at the start pointer
                nums[low], nums[mid] = nums[mid], nums[low]
                # Move both the start and current pointers one position forward
                low += 1
                mid += 1
            elif nums[mid] == 1:
                # If the current element is 1, just move the current pointer one position forward
                mid +=1
            else:
                # If the current element is 2, swap it with the element at the end pointer
                nums[mid], nums[high] = nums[high], nums[mid]
                # Move the end pointer one position backward
                high -= 1
        return nums
